[
	{
		"title": "Agenda",
		"todos": [
			{
				"parent": "Agenda",
				"category": "Agenda",
				"description": "Unwhitelist 0.0.0.0/0",
				"path": "/meta/agenda.js"
			},
			{
				"parent": "Agenda",
				"category": "Agenda",
				"description": "review 12 factors",
				"path": "/meta/agenda.js"
			},
			{
				"parent": "Agenda",
				"category": "Agenda",
				"description": "Develop the basic services",
				"path": "/meta/agenda.js"
			},
			{
				"parent": "Agenda",
				"category": "Agenda",
				"description": "BIG PIC - People Data",
				"path": "/meta/agenda.js"
			},
			{
				"parent": "Agenda",
				"category": "Agenda",
				"description": "BIG PIC - Send email through Graph",
				"path": "/meta/agenda.js"
			},
			{
				"parent": "Agenda",
				"category": "Agenda",
				"description": "BIG PIC - Pull data from SPO",
				"path": "/meta/agenda.js"
			},
			{
				"parent": "Agenda",
				"category": "Agenda",
				"description": "BIG PIC - Serve client from AWS through SPO",
				"path": "/meta/agenda.js"
			},
			{
				"parent": "Email",
				"category": "Agenda",
				"description": "cron process queue",
				"path": "/src/Services/-dev-Email/index.js"
			},
			{
				"parent": "Email",
				"category": "Agenda",
				"description": "cron log",
				"path": "/src/Services/-dev-Email/index.js"
			},
			{
				"parent": "Email",
				"category": "Agenda",
				"description": "sending status",
				"path": "/src/Services/-dev-Email/index.js"
			},
			{
				"parent": "Email",
				"category": "Agenda",
				"description": "queue processing status",
				"path": "/src/Services/-dev-Email/index.js"
			},
			{
				"parent": "Email",
				"category": "Agenda",
				"description": "error handling",
				"path": "/src/Services/-dev-Email/index.js"
			},
			{
				"parent": "Email",
				"category": "Agenda",
				"description": "access through domain or token",
				"path": "/src/Services/-dev-Email/index.js"
			}
		]
	},
	{
		"title": "APIs",
		"preamble": "Each API is essentially a collection of Lambda functions. Each function has access to all layers. \n\t\t\tEach function receives three params from the AWS Lambda service.\n\t\t\t{% collapse title=\"> Params\"%}\n| *@param* | type | required | description |\n| --- |: --- :|: --- :| --- |\n| event | object | | Contains information from the invoker, Amazon API Gateway. [Get details of the event parameter](/misc/paramEvent.html)|\n| context | object | | Contains information about the invocation, function, and execution environment. [Get details of the context parameter](/misc/paramContext.html)|\n| callback | function | | In synchronous functions, call this function to send the response. The callback function takes two arguments: an Error and a response. When you call it, Lambda waits for the event loop to be empty and then returns the response or error to the invoker. The response object must be compatible with JSON.stringify. |\n{% endcollapse %}",
		"apis": [
			{
				"name": "Email",
				"category": "APIs",
				"description": "Handles all email-related requests.",
				"path": "/src/Lambdas/API/-dev-Email/index.js",
				"functions": [
					{
						"name": "HandleSendEmailRequest",
						"description": "Handle request to send email."
					}
				]
			},
			{
				"name": "Kitten",
				"category": "APIs",
				"description": "Just a sample / testing API",
				"path": "/src/Lambdas/API/-dev--Kittens/index.js",
				"functions": [
					{
						"name": "InsertKitten",
						"description": "This is the kitten insertion function in the Kitten API."
					}
				]
			}
		]
	},
	{
		"title": "Layers",
		"preamble": "AWS Lambda Layers contain modules (i.e., code), either MOS or contributed, that is external to but relied upon and accessed by Lambda functions (i.e., dependencies).",
		"layers": [
			{
				"name": "NPM",
				"category": "Layers",
				"description": "This AWS Lambda Layer contains third-party Node.js modules from [NPM](https://www.npmjs.com).",
				"path": "/src/Layers/-dev-NPM"
			},
			{
				"name": "Services",
				"category": "Layers",
				"description": "This AWS Lambda Layer contains MOS modules.",
				"path": "/src/Layers/-dev-Services"
			}
		]
	},
	{
		"title": "Services",
		"preamble": "Services are MOS modules that are used in an AWS Lambda Layer. [Learn more about Layers](#layers)",
		"services": [
			{
				"name": "DataConnection",
				"category": "Services",
				"description": "Return connection to either dev or prod database in MongoDB Atlas service.",
				"path": "/src/Services/-dev-DataConnection/index.js",
				"functions": [
					{
						"name": "ReturnDataConnection",
						"description": "Return [monk](https://www.npmjs.com/package/monk) connection to database, using environment variables"
					}
				]
			},
			{
				"name": "DataQueries",
				"category": "Services",
				"description": "Using DataConnection service, \rfacilitate queries of databases in MongoDB Atlas service.",
				"path": "/src/Services/-dev-DataQueries/index.js",
				"functions": [
					{
						"name": "ReturnAllDocsFromCollection",
						"description": "Return all documents from a collection",
						"params": [
							{
								"name": "collection",
								"description": "e.g., '_Kittens'",
								"required": true,
								"type": "string"
							}
						]
					}
				]
			},
			{
				"name": "Email",
				"category": "Services",
				"description": "Performs all email-related operations.",
				"path": "/src/Services/-dev-Email/index.js",
				"functions": [
					{
						"name": "AddEmailToArchive",
						"description": "Add the email to the archive, i.e., the doc to the 'emailArchive' collection.",
						"params": [
							{
								"name": "incomingEmail",
								"description": "One email\n<br>\n*(/src/TypeDefs/Email.js)*",
								"required": true,
								"type": "object"
							},
							{
								"name": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.event",
								"description": "flag, archived, indicating type of \nemail; useful for filtering archive; e.g., 'approved admin'",
								"type": "string"
							},
							{
								"name": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.from",
								"description": "email address string; must correspond to a \nuser in the MOS O365 tenancy; e.g., 'sp1@mos.org', 'Hub Tester1 &lt;sp1@mos.org&gt;'",
								"required": true,
								"type": "string"
							},
							{
								"name": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.html",
								"description": "HTML email body",
								"type": "string"
							},
							{
								"name": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.subject",
								"description": "e.g., 'This is a subject'",
								"required": true,
								"type": "string"
							},
							{
								"name": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.system",
								"description": "flag, archived, indicating system \ngenerating this email; useful for filtering archive; e.g., 'hub'",
								"type": "string"
							},
							{
								"name": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.text",
								"description": "plain text (non-HTML) email body",
								"type": "string"
							},
							{
								"name": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.to",
								"description": "email address string or array email \naddress strings; e.g., ['sp1@mos.org', 'Hub Tester1 &lt;sp1@mos.org&gt;']",
								"required": true,
								"type": "string &#124; Array"
							},
							{
								"name": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.type",
								"description": "flag, archived, indicating type of \nemail; useful for filtering archive; e.g., 'notification'",
								"type": "string"
							}
						]
					},
					{
						"name": "AddEmailToQueue",
						"description": "Add the email to the queue, i.e., the doc to the 'emailQueue' collection.",
						"params": [
							{
								"name": "incomingEmail",
								"description": "{@link Email} object",
								"required": true,
								"type": "object"
							},
							{
								"name": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.event",
								"description": "flag, archived, indicating type of \nemail; useful for filtering archive; e.g., 'approved admin'",
								"type": "string"
							},
							{
								"name": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.from",
								"description": "email address string; must correspond to a \nuser in the MOS O365 tenancy; e.g., 'sp1@mos.org', 'Hub Tester1 &lt;sp1@mos.org&gt;'",
								"required": true,
								"type": "string"
							},
							{
								"name": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.html",
								"description": "HTML email body",
								"type": "string"
							},
							{
								"name": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.subject",
								"description": "e.g., 'This is a subject'",
								"required": true,
								"type": "string"
							},
							{
								"name": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.system",
								"description": "flag, archived, indicating system \ngenerating this email; useful for filtering archive; e.g., 'hub'",
								"type": "string"
							},
							{
								"name": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.text",
								"description": "plain text (non-HTML) email body",
								"type": "string"
							},
							{
								"name": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.to",
								"description": "email address string or array email \naddress strings; e.g., ['sp1@mos.org', 'Hub Tester1 &lt;sp1@mos.org&gt;']",
								"required": true,
								"type": "string &#124; Array"
							},
							{
								"name": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.type",
								"description": "flag, archived, indicating type of \nemail; useful for filtering archive; e.g., 'notification'",
								"type": "string"
							}
						]
					},
					{
						"name": "DeleteArchivedEmail",
						"description": "Delete one email from the archive, i.e., one doc in the 'emailArchive' collection.",
						"params": [
							{
								"name": "emailID",
								"description": "ID of email to delete, i.e., of doc to remove",
								"required": true,
								"type": "string"
							}
						]
					},
					{
						"name": "DeleteQueuedEmail",
						"description": "Delete one email from the queue, i.e., one doc in the 'emailQueue' collection.",
						"params": [
							{
								"name": "emailID",
								"description": "ID of email to delete, i.e., of doc to remove",
								"required": true,
								"type": "string"
							}
						]
					},
					{
						"name": "ProcessEmailQueue",
						"description": "For each email in the queue, attempt to send the email (including\narchiving and deleting from queue)."
					},
					{
						"name": "ReplaceAllEmailSettings",
						"description": "Replace email settings object in database, i.e., doc in 'emailSettings' queue.",
						"params": [
							{
								"name": "newSettings",
								"description": "object comprising new email settings",
								"required": true,
								"type": "object"
							}
						]
					},
					{
						"name": "ReplaceArchivedEmail",
						"description": "Replace one email in the archive, i.e., one doc in the 'emailArchive' collection.",
						"params": [
							{
								"name": "emailID",
								"description": "ID of email to replace, i.e., of doc to overwrite",
								"required": true,
								"type": "string"
							},
							{
								"name": "incomingEmail",
								"description": "One email\n<br>\n*(/src/TypeDefs/Email.js)*",
								"required": true,
								"type": "object"
							},
							{
								"name": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.event",
								"description": "flag, archived, indicating type of \nemail; useful for filtering archive; e.g., 'approved admin'",
								"type": "string"
							},
							{
								"name": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.from",
								"description": "email address string; must correspond to a \nuser in the MOS O365 tenancy; e.g., 'sp1@mos.org', 'Hub Tester1 &lt;sp1@mos.org&gt;'",
								"required": true,
								"type": "string"
							},
							{
								"name": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.html",
								"description": "HTML email body",
								"type": "string"
							},
							{
								"name": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.subject",
								"description": "e.g., 'This is a subject'",
								"required": true,
								"type": "string"
							},
							{
								"name": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.system",
								"description": "flag, archived, indicating system \ngenerating this email; useful for filtering archive; e.g., 'hub'",
								"type": "string"
							},
							{
								"name": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.text",
								"description": "plain text (non-HTML) email body",
								"type": "string"
							},
							{
								"name": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.to",
								"description": "email address string or array email \naddress strings; e.g., ['sp1@mos.org', 'Hub Tester1 &lt;sp1@mos.org&gt;']",
								"required": true,
								"type": "string &#124; Array"
							},
							{
								"name": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.type",
								"description": "flag, archived, indicating type of \nemail; useful for filtering archive; e.g., 'notification'",
								"type": "string"
							}
						]
					},
					{
						"name": "ReplaceOneEmailSetting",
						"description": "Replace one email setting in database, i.e., one property of \ndoc in 'emailSettings' queue.",
						"params": [
							{
								"name": "newSingleSettingObject",
								"description": "object comprising new email setting property",
								"required": true,
								"type": "object"
							}
						]
					},
					{
						"name": "ReplaceQueuedEmail",
						"description": "Replace one email in the queue, i.e., one doc in the 'emailQueue' collection.",
						"params": [
							{
								"name": "emailID",
								"description": "ID of email to replace, i.e., of doc to overwrite",
								"required": true,
								"type": "string"
							},
							{
								"name": "incomingEmail",
								"description": "One email\n<br>\n*(/src/TypeDefs/Email.js)*",
								"required": true,
								"type": "object"
							},
							{
								"name": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.event",
								"description": "flag, archived, indicating type of \nemail; useful for filtering archive; e.g., 'approved admin'",
								"type": "string"
							},
							{
								"name": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.from",
								"description": "email address string; must correspond to a \nuser in the MOS O365 tenancy; e.g., 'sp1@mos.org', 'Hub Tester1 &lt;sp1@mos.org&gt;'",
								"required": true,
								"type": "string"
							},
							{
								"name": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.html",
								"description": "HTML email body",
								"type": "string"
							},
							{
								"name": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.subject",
								"description": "e.g., 'This is a subject'",
								"required": true,
								"type": "string"
							},
							{
								"name": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.system",
								"description": "flag, archived, indicating system \ngenerating this email; useful for filtering archive; e.g., 'hub'",
								"type": "string"
							},
							{
								"name": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.text",
								"description": "plain text (non-HTML) email body",
								"type": "string"
							},
							{
								"name": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.to",
								"description": "email address string or array email \naddress strings; e.g., ['sp1@mos.org', 'Hub Tester1 &lt;sp1@mos.org&gt;']",
								"required": true,
								"type": "string &#124; Array"
							},
							{
								"name": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.type",
								"description": "flag, archived, indicating type of \nemail; useful for filtering archive; e.g., 'notification'",
								"type": "string"
							}
						]
					},
					{
						"name": "ReturnEmailArchiveData",
						"description": "Return all emails from the email archive \n(all docs from the 'emailArchive' collection)."
					},
					{
						"name": "ReturnEmailQueueData",
						"description": "Return all emails from the email queue \n(all docs from the 'emailQueue' collection)."
					},
					{
						"name": "ReturnEmailQueueProcessingStatus",
						"description": "Return the setting indicating whether or not email the email queue \nshould be processed.This setting can be set to false in database to prevent queued emails\nfrom being sent."
					},
					{
						"name": "ReturnEmailSendingStatus",
						"description": "Return the setting indicating whether or not emails should be sent at this time.\nThis setting can be set to false in database to prevent emails from being sent."
					},
					{
						"name": "ReturnEmailSettingsData",
						"description": "Return all email settings \n(all docs from the 'emailSettings' collection)."
					},
					{
						"name": "ReturnEmailWhitelistedDomains",
						"description": "Return the setting indicating the domains from which email requests are accepted.\nAdd a domain to this setting in database to all requests from an additional domain."
					},
					{
						"name": "SendEachEmailFromArray",
						"description": "For each email in an array, attempt to send the email.",
						"params": [
							{
								"name": "emailArray",
								"description": "array of objects, each comprising data for one email",
								"required": true,
								"type": "Array.<object>"
							}
						]
					},
					{
						"name": "SendEmail",
						"description": "Send one email to MSGraph service. If Graph is \nsuccessful in sending, add email to archive (and remove from queue, \nas appropriate). If Graph is not successful in sending, add email to \nqueue.",
						"params": [
							{
								"name": "incomingEmail",
								"description": "One email\n<br>\n*(/src/TypeDefs/Email.js)*",
								"required": true,
								"type": "object"
							},
							{
								"name": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.event",
								"description": "flag, archived, indicating type of \nemail; useful for filtering archive; e.g., 'approved admin'",
								"type": "string"
							},
							{
								"name": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.from",
								"description": "email address string; must correspond to a \nuser in the MOS O365 tenancy; e.g., 'sp1@mos.org', 'Hub Tester1 &lt;sp1@mos.org&gt;'",
								"required": true,
								"type": "string"
							},
							{
								"name": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.html",
								"description": "HTML email body",
								"type": "string"
							},
							{
								"name": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.subject",
								"description": "e.g., 'This is a subject'",
								"required": true,
								"type": "string"
							},
							{
								"name": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.system",
								"description": "flag, archived, indicating system \ngenerating this email; useful for filtering archive; e.g., 'hub'",
								"type": "string"
							},
							{
								"name": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.text",
								"description": "plain text (non-HTML) email body",
								"type": "string"
							},
							{
								"name": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.to",
								"description": "email address string or array email \naddress strings; e.g., ['sp1@mos.org', 'Hub Tester1 &lt;sp1@mos.org&gt;']",
								"required": true,
								"type": "string &#124; Array"
							},
							{
								"name": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.type",
								"description": "flag, archived, indicating type of \nemail; useful for filtering archive; e.g., 'notification'",
								"type": "string"
							}
						]
					}
				]
			},
			{
				"name": "MSGraph",
				"category": "Services",
				"description": "Query the Microsoft Graph API",
				"path": "/src/Services/-dev-MSGraph/index.js",
				"functions": []
			},
			{
				"name": "UltiPro",
				"category": "Services",
				"description": "Query the UltiPro EmployeeChangesAPI",
				"path": "/src/Services/-dev-UltiPro/index.js",
				"functions": [
					{
						"name": "ReturnAllEmployeesFromUltiPro",
						"description": "Return all employees from the UltiPro EmployeeChanges API. \nI.e., Return all of the pages."
					},
					{
						"name": "ReturnOnePageOfEmployeesFromUltiPro",
						"description": "Return one page of employees from the UltiPro EmployeeChanges API. \nThis is the one point of actual contact with the UltiPro EmployeeChanges API.",
						"params": [
							{
								"name": "upApiKey",
								"description": "Environment variable,\nstored in AWS Systems Manager, Parameter store",
								"required": true
							},
							{
								"name": "upEmployeeChangesPass",
								"description": "Environment variable,\nstored in AWS Systems Manager, Parameter store",
								"required": true
							},
							{
								"name": "upEmployeeChangesUser",
								"description": "Environment variable,\nstored in AWS Systems Manager, Parameter store",
								"required": true
							},
							{
								"name": "page",
								"description": "Which page to return",
								"required": true
							}
						]
					},
					{
						"name": "ReturnUltiProEmployeeChangesQueryConfig",
						"description": "Return URI and options for get query to UltiPro EmployeeChanges API",
						"params": [
							{
								"name": "page",
								"description": "Which page to return",
								"required": true
							}
						]
					}
				]
			},
			{
				"name": "Utilities",
				"category": "Services",
				"description": "Miscellaneous utility functions",
				"path": "/src/Services/-dev-Utilities/index.js",
				"functions": [
					{
						"name": "ReplaceAll",
						"description": "Return substring preceding '\\r' and/or '\\n' characters.",
						"params": [
							{
								"name": "needle",
								"description": "string to search for",
								"required": true,
								"type": "string"
							},
							{
								"name": "replacementNeedle",
								"description": "string to replace needle",
								"required": true,
								"type": "string"
							},
							{
								"name": "haystack",
								"description": "string to search in",
								"required": true,
								"type": "string"
							}
						]
					},
					{
						"name": "ReturnAccountFromUserAndDomain",
						"description": "Return substring preceding '@' character.",
						"params": [
							{
								"name": "incomingString",
								"description": "e.g., 'sp1@mos.org'",
								"required": true,
								"type": "string"
							}
						]
					},
					{
						"name": "ReturnArrayElementExists",
						"description": "Return true if element is in array, false if not.",
						"params": [
							{
								"name": "testArray",
								"description": "array to test",
								"required": true,
								"type": "string"
							},
							{
								"name": "testElement",
								"description": "element for which to test",
								"required": true,
								"type": "string"
							}
						]
					},
					{
						"name": "ReturnCopyOfObject",
						"description": "Return a deep / unique copy of an object \n(as opposed to a reference to the original object).",
						"params": [
							{
								"name": "incomingObject",
								"description": "e.g., any valid object",
								"required": true,
								"type": "string"
							}
						]
					},
					{
						"name": "ReturnFormattedDateTime",
						"description": "Use moment.js to calculate and format times. \nPresent for backward compatibility; should use moment \ndirectly going forward.",
						"params": [
							{
								"name": "incomingDateTimeString",
								"description": "predefined token or \nmoment-parsable representation of datetime; \ne.g., 'nowLocal', 'nowUTC', 'April 19, 2020'",
								"required": true,
								"type": "string"
							},
							{
								"name": "incomingFormat",
								"description": "null or moment-compatible \nindication of format of incomingDateTimeString; \ne.g., null, 'YYYY-MM-DDTHH:mm:ssZ'",
								"required": true,
								"type": "string &#124; null"
							},
							{
								"name": "incomingReturnFormat",
								"description": "null or moment-compatible \nindication of format of datetime string to return; \ne.g., null, 'YYYY-MM-DDTHH:mm:ssZ'",
								"required": true,
								"type": "string &#124; null"
							},
							{
								"name": "determineYearDisplayDynamically",
								"description": "if 1, \nthe datetime's year will only be included if it is not the current year; \ne.g., null, 0, 1",
								"required": true,
								"type": "number &#124; null"
							}
						]
					},
					{
						"name": "ReturnSubstringPrecedingNewLineCharacters",
						"description": "Return substring preceding '\\r' and/or '\\n' characters.",
						"params": [
							{
								"name": "incomingString",
								"description": "e.g., 'Web & Mobile Application Developer\\r\\n'",
								"required": true,
								"type": "string"
							}
						]
					},
					{
						"name": "ReturnTerseEmailAddressFromFriendly",
						"description": "Return the actual address portion from a friendly-formatted\naddress. E.g., return 'noreply@mos.org'.",
						"params": [
							{
								"name": "incomingString",
								"description": "e.g., 'The Hub <noreply@mos.org>'",
								"required": true,
								"type": "string"
							}
						]
					}
				]
			}
		]
	}
]